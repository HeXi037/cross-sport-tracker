# Adds healthchecks without touching docker-compose.unraid.yml
services:
  backend:
    # backend is a Python image, so Python is guaranteed available
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - <<'PY'\nimport urllib.request, sys\ntry:\n  with urllib.request.urlopen('http://127.0.0.1:8000/api/healthz', timeout=2) as r:\n    sys.exit(0 if r.status==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY",
        ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 20s

  web:
    # web is a Node image; probe both / and /record/padel
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node - <<'NODE'\nconst http = require('http');\n\nconst origin = 'http://127.0.0.1:3000';\nconst paths = ['/', '/record/padel'];\nconst MAX_REDIRECTS = 3;\n\nfunction check(url, redirects = 0) {\n  return new Promise((resolve) => {\n    const req = http.get(url, (res) => {\n      res.resume();\n      const status = res.statusCode || 0;\n      if (status >= 200 && status < 300) {\n        resolve(true);\n        return;\n      }\n      if (\n        status >= 300 &&\n        status < 400 &&\n        res.headers.location &&\n        redirects < MAX_REDIRECTS\n      ) {\n        const nextUrl = new URL(res.headers.location, url).toString();\n        check(nextUrl, redirects + 1).then(resolve);\n        return;\n      }\n      resolve(false);\n    });\n    req.on('error', () => resolve(false));\n  });\n}\n\n(async () => {\n  const results = await Promise.all(\n    paths.map((path) => check(new URL(path, origin).toString()))\n  );\n  process.exit(results.every(Boolean) ? 0 : 1);\n})();\nNODE",
        ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 30s

  db_backup:
    # postgres image includes pg_isready; make host configurable
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-postgresql16}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h $${POSTGRES_HOST:-postgresql16} -U $${PGUSER} -d $${PGDATABASE} -t 2",
        ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 30s

# End of healthcheck configuration
